(define (subsets s)
    (if (null? s)
        (list '())
        (let ((rest (subsets (cdr s))))
            (append rest (map (lambda (x)
                                      (cons (car s) x))
                              rest)))))

(define test-set (list 1 2 3))

(subsets test-set)
;Value: (() (3) (2) (2 3) (1) (1 3) (1 2) (1 2 3))

;;; 把过程打印出来
(define (subs s)
    (if (null? s)
        (begin (newline)
               (display "list '()")
               (list '()))
        (begin (let ((rest (subs (cdr s))))
                    (newline)
                    (display "s = ")
                    (display s)
                    (newline)
                    (display rest)
                    (display " + ")
                    (display (map (lambda (x) (cons (car s) x)) rest))
                    (append rest (map (lambda (x)
                                              (cons (car s) x))
                                      rest))))))

(subs test-set)
; list '()
; s = (3)
; (()) + ((3))
; s = (2 3)
; (() (3)) + ((2) (2 3))
; s = (1 2 3)
; (() (3) (2) (2 3)) + ((1) (1 3) (1 2) (1 2 3))
; ;Value: (() (3) (2) (2 3) (1) (1 3) (1 2) (1 2 3))